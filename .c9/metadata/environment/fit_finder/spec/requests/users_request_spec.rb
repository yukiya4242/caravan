{"filter":false,"title":"users_request_spec.rb","tooltip":"/fit_finder/spec/requests/users_request_spec.rb","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":326,"column":15},"end":{"row":326,"column":16},"action":"insert","lines":["a"],"id":2363},{"start":{"row":326,"column":16},"end":{"row":326,"column":17},"action":"insert","lines":["s"]},{"start":{"row":326,"column":17},"end":{"row":326,"column":18},"action":"insert","lines":["s"]},{"start":{"row":326,"column":18},"end":{"row":326,"column":19},"action":"insert","lines":["i"]},{"start":{"row":326,"column":19},"end":{"row":326,"column":20},"action":"insert","lines":["g"]}],[{"start":{"row":326,"column":20},"end":{"row":326,"column":21},"action":"insert","lines":["n"],"id":2364},{"start":{"row":326,"column":21},"end":{"row":326,"column":22},"action":"insert","lines":["s"]}],[{"start":{"row":326,"column":22},"end":{"row":326,"column":24},"action":"insert","lines":["()"],"id":2365}],[{"start":{"row":326,"column":23},"end":{"row":326,"column":24},"action":"insert","lines":[":"],"id":2366},{"start":{"row":326,"column":24},"end":{"row":326,"column":25},"action":"insert","lines":["u"]},{"start":{"row":326,"column":25},"end":{"row":326,"column":26},"action":"insert","lines":["s"]},{"start":{"row":326,"column":26},"end":{"row":326,"column":27},"action":"insert","lines":["e"]},{"start":{"row":326,"column":27},"end":{"row":326,"column":28},"action":"insert","lines":["r"]},{"start":{"row":326,"column":28},"end":{"row":326,"column":29},"action":"insert","lines":["s"]}],[{"start":{"row":326,"column":31},"end":{"row":326,"column":32},"action":"insert","lines":["."],"id":2367},{"start":{"row":326,"column":32},"end":{"row":326,"column":33},"action":"insert","lines":["t"]},{"start":{"row":326,"column":33},"end":{"row":326,"column":34},"action":"insert","lines":["o"]}],[{"start":{"row":326,"column":34},"end":{"row":326,"column":35},"action":"insert","lines":[" "],"id":2368},{"start":{"row":326,"column":35},"end":{"row":326,"column":36},"action":"insert","lines":["e"]},{"start":{"row":326,"column":36},"end":{"row":326,"column":37},"action":"insert","lines":["q"]}],[{"start":{"row":326,"column":37},"end":{"row":326,"column":39},"action":"insert","lines":["()"],"id":2369}],[{"start":{"row":326,"column":38},"end":{"row":326,"column":39},"action":"insert","lines":["Y"],"id":2370}],[{"start":{"row":326,"column":38},"end":{"row":326,"column":39},"action":"remove","lines":["Y"],"id":2371}],[{"start":{"row":326,"column":38},"end":{"row":326,"column":39},"action":"insert","lines":["U"],"id":2372},{"start":{"row":326,"column":39},"end":{"row":326,"column":40},"action":"insert","lines":["s"]},{"start":{"row":326,"column":40},"end":{"row":326,"column":41},"action":"insert","lines":["e"]},{"start":{"row":326,"column":41},"end":{"row":326,"column":42},"action":"insert","lines":["r"]},{"start":{"row":326,"column":42},"end":{"row":326,"column":43},"action":"insert","lines":["."]},{"start":{"row":326,"column":43},"end":{"row":326,"column":44},"action":"insert","lines":["a"]}],[{"start":{"row":326,"column":44},"end":{"row":326,"column":45},"action":"insert","lines":["l"],"id":2373},{"start":{"row":326,"column":45},"end":{"row":326,"column":46},"action":"insert","lines":["l"]}],[{"start":{"row":326,"column":47},"end":{"row":327,"column":0},"action":"insert","lines":["",""],"id":2374},{"start":{"row":327,"column":0},"end":{"row":327,"column":8},"action":"insert","lines":["        "]},{"start":{"row":327,"column":8},"end":{"row":327,"column":9},"action":"insert","lines":["e"]},{"start":{"row":327,"column":9},"end":{"row":327,"column":10},"action":"insert","lines":["x"]}],[{"start":{"row":327,"column":10},"end":{"row":327,"column":11},"action":"insert","lines":["p"],"id":2375},{"start":{"row":327,"column":11},"end":{"row":327,"column":12},"action":"insert","lines":["e"]},{"start":{"row":327,"column":12},"end":{"row":327,"column":13},"action":"insert","lines":["c"]},{"start":{"row":327,"column":13},"end":{"row":327,"column":14},"action":"insert","lines":["t"]}],[{"start":{"row":327,"column":14},"end":{"row":327,"column":16},"action":"insert","lines":["()"],"id":2376}],[{"start":{"row":327,"column":15},"end":{"row":327,"column":16},"action":"insert","lines":["a"],"id":2377},{"start":{"row":327,"column":16},"end":{"row":327,"column":17},"action":"insert","lines":["s"]},{"start":{"row":327,"column":17},"end":{"row":327,"column":18},"action":"insert","lines":["s"]},{"start":{"row":327,"column":18},"end":{"row":327,"column":19},"action":"insert","lines":["i"]},{"start":{"row":327,"column":19},"end":{"row":327,"column":20},"action":"insert","lines":["g"]},{"start":{"row":327,"column":20},"end":{"row":327,"column":21},"action":"insert","lines":["n"]},{"start":{"row":327,"column":21},"end":{"row":327,"column":22},"action":"insert","lines":["s"]}],[{"start":{"row":327,"column":22},"end":{"row":327,"column":24},"action":"insert","lines":["()"],"id":2378}],[{"start":{"row":327,"column":23},"end":{"row":327,"column":24},"action":"insert","lines":["p"],"id":2379},{"start":{"row":327,"column":24},"end":{"row":327,"column":25},"action":"insert","lines":["o"]},{"start":{"row":327,"column":25},"end":{"row":327,"column":26},"action":"insert","lines":["s"]},{"start":{"row":327,"column":26},"end":{"row":327,"column":27},"action":"insert","lines":["t"]},{"start":{"row":327,"column":27},"end":{"row":327,"column":28},"action":"insert","lines":["s"]}],[{"start":{"row":327,"column":27},"end":{"row":327,"column":28},"action":"remove","lines":["s"],"id":2380},{"start":{"row":327,"column":26},"end":{"row":327,"column":27},"action":"remove","lines":["t"]},{"start":{"row":327,"column":25},"end":{"row":327,"column":26},"action":"remove","lines":["s"]},{"start":{"row":327,"column":24},"end":{"row":327,"column":25},"action":"remove","lines":["o"]},{"start":{"row":327,"column":23},"end":{"row":327,"column":24},"action":"remove","lines":["p"]},{"start":{"row":327,"column":22},"end":{"row":327,"column":24},"action":"remove","lines":["()"]}],[{"start":{"row":327,"column":22},"end":{"row":327,"column":24},"action":"insert","lines":["()"],"id":2381}],[{"start":{"row":327,"column":23},"end":{"row":327,"column":24},"action":"insert","lines":[":"],"id":2382},{"start":{"row":327,"column":24},"end":{"row":327,"column":25},"action":"insert","lines":["p"]},{"start":{"row":327,"column":25},"end":{"row":327,"column":26},"action":"insert","lines":["o"]},{"start":{"row":327,"column":26},"end":{"row":327,"column":27},"action":"insert","lines":["s"]},{"start":{"row":327,"column":27},"end":{"row":327,"column":28},"action":"insert","lines":["t"]},{"start":{"row":327,"column":28},"end":{"row":327,"column":29},"action":"insert","lines":["s"]}],[{"start":{"row":327,"column":31},"end":{"row":327,"column":32},"action":"insert","lines":["."],"id":2383},{"start":{"row":327,"column":32},"end":{"row":327,"column":33},"action":"insert","lines":["t"]},{"start":{"row":327,"column":33},"end":{"row":327,"column":34},"action":"insert","lines":["o"]}],[{"start":{"row":327,"column":34},"end":{"row":327,"column":35},"action":"insert","lines":[" "],"id":2384},{"start":{"row":327,"column":35},"end":{"row":327,"column":36},"action":"insert","lines":["e"]},{"start":{"row":327,"column":36},"end":{"row":327,"column":37},"action":"insert","lines":["q"]}],[{"start":{"row":327,"column":37},"end":{"row":327,"column":39},"action":"insert","lines":["()"],"id":2385}],[{"start":{"row":327,"column":38},"end":{"row":327,"column":39},"action":"insert","lines":["P"],"id":2386},{"start":{"row":327,"column":39},"end":{"row":327,"column":40},"action":"insert","lines":["o"]},{"start":{"row":327,"column":40},"end":{"row":327,"column":41},"action":"insert","lines":["s"]},{"start":{"row":327,"column":41},"end":{"row":327,"column":42},"action":"insert","lines":["t"]},{"start":{"row":327,"column":42},"end":{"row":327,"column":43},"action":"insert","lines":["."]},{"start":{"row":327,"column":43},"end":{"row":327,"column":44},"action":"insert","lines":["a"]},{"start":{"row":327,"column":44},"end":{"row":327,"column":45},"action":"insert","lines":["l"]}],[{"start":{"row":327,"column":45},"end":{"row":327,"column":46},"action":"insert","lines":["l"],"id":2387}],[{"start":{"row":327,"column":47},"end":{"row":328,"column":0},"action":"insert","lines":["",""],"id":2388},{"start":{"row":328,"column":0},"end":{"row":328,"column":8},"action":"insert","lines":["        "]},{"start":{"row":328,"column":8},"end":{"row":328,"column":9},"action":"insert","lines":["e"]},{"start":{"row":328,"column":9},"end":{"row":328,"column":10},"action":"insert","lines":["n"]},{"start":{"row":328,"column":10},"end":{"row":328,"column":11},"action":"insert","lines":["d"]},{"start":{"row":328,"column":6},"end":{"row":328,"column":8},"action":"remove","lines":["  "]}],[{"start":{"row":328,"column":9},"end":{"row":329,"column":0},"action":"insert","lines":["",""],"id":2389},{"start":{"row":329,"column":0},"end":{"row":329,"column":6},"action":"insert","lines":["      "]},{"start":{"row":329,"column":6},"end":{"row":329,"column":7},"action":"insert","lines":["e"]},{"start":{"row":329,"column":7},"end":{"row":329,"column":8},"action":"insert","lines":["d"]},{"start":{"row":329,"column":8},"end":{"row":329,"column":9},"action":"insert","lines":["n"]}],[{"start":{"row":329,"column":8},"end":{"row":329,"column":9},"action":"remove","lines":["n"],"id":2390},{"start":{"row":329,"column":7},"end":{"row":329,"column":8},"action":"remove","lines":["d"]}],[{"start":{"row":329,"column":7},"end":{"row":329,"column":8},"action":"insert","lines":["n"],"id":2391},{"start":{"row":329,"column":8},"end":{"row":329,"column":9},"action":"insert","lines":["d"]},{"start":{"row":329,"column":4},"end":{"row":329,"column":6},"action":"remove","lines":["  "]}],[{"start":{"row":329,"column":7},"end":{"row":330,"column":0},"action":"insert","lines":["",""],"id":2392},{"start":{"row":330,"column":0},"end":{"row":330,"column":4},"action":"insert","lines":["    "]},{"start":{"row":330,"column":4},"end":{"row":330,"column":5},"action":"insert","lines":["e"]},{"start":{"row":330,"column":5},"end":{"row":330,"column":6},"action":"insert","lines":["n"]},{"start":{"row":330,"column":6},"end":{"row":330,"column":7},"action":"insert","lines":["d"]},{"start":{"row":330,"column":2},"end":{"row":330,"column":4},"action":"remove","lines":["  "]}],[{"start":{"row":281,"column":0},"end":{"row":281,"column":2},"action":"remove","lines":["  "],"id":2395},{"start":{"row":282,"column":0},"end":{"row":282,"column":2},"action":"remove","lines":["  "]},{"start":{"row":286,"column":0},"end":{"row":286,"column":2},"action":"remove","lines":["  "]},{"start":{"row":292,"column":0},"end":{"row":292,"column":6},"action":"remove","lines":["      "]},{"start":{"row":296,"column":0},"end":{"row":296,"column":6},"action":"remove","lines":["      "]},{"start":{"row":301,"column":0},"end":{"row":301,"column":4},"action":"remove","lines":["    "]},{"start":{"row":306,"column":0},"end":{"row":306,"column":6},"action":"remove","lines":["      "]},{"start":{"row":310,"column":0},"end":{"row":310,"column":6},"action":"remove","lines":["      "]},{"start":{"row":315,"column":0},"end":{"row":315,"column":4},"action":"remove","lines":["    "]},{"start":{"row":320,"column":0},"end":{"row":320,"column":6},"action":"remove","lines":["      "]},{"start":{"row":324,"column":0},"end":{"row":324,"column":6},"action":"remove","lines":["      "]},{"start":{"row":331,"column":0},"end":{"row":331,"column":8},"action":"remove","lines":["        "]}],[{"start":{"row":283,"column":0},"end":{"row":285,"column":5},"action":"remove","lines":["  before do","    sign_in user","  end"],"id":2396},{"start":{"row":282,"column":0},"end":{"row":283,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":178,"column":8},"end":{"row":178,"column":44},"action":"remove","lines":["post follow_user_path(other_user.id)"],"id":2397},{"start":{"row":178,"column":8},"end":{"row":178,"column":41},"action":"insert","lines":["post follow_user_path(other_user)"]}],[{"start":{"row":183,"column":6},"end":{"row":183,"column":42},"action":"remove","lines":["post follow_user_path(other_user.id)"],"id":2399},{"start":{"row":183,"column":6},"end":{"row":184,"column":0},"action":"insert","lines":["post follow_user_path(other_user)",""]}],[{"start":{"row":183,"column":39},"end":{"row":184,"column":0},"action":"remove","lines":["",""],"id":2400}],[{"start":{"row":191,"column":8},"end":{"row":191,"column":44},"action":"remove","lines":["post follow_user_path(other_user.id)"],"id":2401},{"start":{"row":191,"column":8},"end":{"row":192,"column":0},"action":"insert","lines":["post follow_user_path(other_user)",""]}],[{"start":{"row":191,"column":41},"end":{"row":192,"column":0},"action":"remove","lines":["",""],"id":2402}],[{"start":{"row":183,"column":5},"end":{"row":183,"column":39},"action":"remove","lines":[" post follow_user_path(other_user)"],"id":2403},{"start":{"row":183,"column":5},"end":{"row":184,"column":0},"action":"insert","lines":["post follow_user_path(id: other_user.id)",""]}],[{"start":{"row":183,"column":45},"end":{"row":184,"column":0},"action":"remove","lines":["",""],"id":2404}],[{"start":{"row":183,"column":5},"end":{"row":183,"column":6},"action":"insert","lines":["　"],"id":2405}],[{"start":{"row":183,"column":5},"end":{"row":183,"column":6},"action":"remove","lines":["　"],"id":2406}],[{"start":{"row":183,"column":5},"end":{"row":183,"column":6},"action":"insert","lines":[" "],"id":2407},{"start":{"row":183,"column":6},"end":{"row":183,"column":7},"action":"insert","lines":[" "]}],[{"start":{"row":183,"column":6},"end":{"row":183,"column":7},"action":"remove","lines":[" "],"id":2408}],[{"start":{"row":178,"column":8},"end":{"row":178,"column":41},"action":"remove","lines":["post follow_user_path(other_user)"],"id":2409},{"start":{"row":178,"column":8},"end":{"row":179,"column":0},"action":"insert","lines":["post follow_user_path(id: other_user.id)",""]}],[{"start":{"row":178,"column":48},"end":{"row":179,"column":0},"action":"remove","lines":["",""],"id":2410}],[{"start":{"row":191,"column":8},"end":{"row":191,"column":41},"action":"remove","lines":["post follow_user_path(other_user)"],"id":2411},{"start":{"row":191,"column":8},"end":{"row":192,"column":0},"action":"insert","lines":["post follow_user_path(id: other_user.id)",""]}],[{"start":{"row":191,"column":48},"end":{"row":192,"column":0},"action":"remove","lines":["",""],"id":2412}],[{"start":{"row":183,"column":6},"end":{"row":183,"column":46},"action":"remove","lines":["post follow_user_path(id: other_user.id)"],"id":2413},{"start":{"row":183,"column":6},"end":{"row":184,"column":0},"action":"insert","lines":["post follow_user_path(other_user.id)",""]}],[{"start":{"row":183,"column":42},"end":{"row":184,"column":0},"action":"remove","lines":["",""],"id":2414}],[{"start":{"row":191,"column":8},"end":{"row":191,"column":48},"action":"remove","lines":["post follow_user_path(id: other_user.id)"],"id":2415},{"start":{"row":191,"column":8},"end":{"row":192,"column":0},"action":"insert","lines":["post follow_user_path(other_user.id)",""]}],[{"start":{"row":191,"column":44},"end":{"row":192,"column":0},"action":"remove","lines":["",""],"id":2416}],[{"start":{"row":178,"column":7},"end":{"row":178,"column":48},"action":"remove","lines":[" post follow_user_path(id: other_user.id)"],"id":2417},{"start":{"row":178,"column":7},"end":{"row":179,"column":0},"action":"insert","lines":["post follow_user_path(other_user.id)",""]}],[{"start":{"row":178,"column":43},"end":{"row":179,"column":0},"action":"remove","lines":["",""],"id":2418}],[{"start":{"row":178,"column":41},"end":{"row":178,"column":42},"action":"remove","lines":["d"],"id":2419},{"start":{"row":178,"column":40},"end":{"row":178,"column":41},"action":"remove","lines":["i"]},{"start":{"row":178,"column":39},"end":{"row":178,"column":40},"action":"remove","lines":["."]}],[{"start":{"row":183,"column":40},"end":{"row":183,"column":41},"action":"remove","lines":["d"],"id":2420},{"start":{"row":183,"column":39},"end":{"row":183,"column":40},"action":"remove","lines":["i"]},{"start":{"row":183,"column":38},"end":{"row":183,"column":39},"action":"remove","lines":["."]}],[{"start":{"row":284,"column":2},"end":{"row":284,"column":4},"action":"insert","lines":["# "],"id":2421},{"start":{"row":285,"column":2},"end":{"row":285,"column":4},"action":"insert","lines":["# "]},{"start":{"row":286,"column":2},"end":{"row":286,"column":4},"action":"insert","lines":["# "]},{"start":{"row":287,"column":2},"end":{"row":287,"column":4},"action":"insert","lines":["# "]},{"start":{"row":288,"column":2},"end":{"row":288,"column":4},"action":"insert","lines":["# "]},{"start":{"row":290,"column":2},"end":{"row":290,"column":4},"action":"insert","lines":["# "]},{"start":{"row":291,"column":2},"end":{"row":291,"column":4},"action":"insert","lines":["# "]},{"start":{"row":292,"column":2},"end":{"row":292,"column":4},"action":"insert","lines":["# "]},{"start":{"row":294,"column":2},"end":{"row":294,"column":4},"action":"insert","lines":["# "]},{"start":{"row":295,"column":2},"end":{"row":295,"column":4},"action":"insert","lines":["# "]},{"start":{"row":296,"column":2},"end":{"row":296,"column":4},"action":"insert","lines":["# "]},{"start":{"row":297,"column":2},"end":{"row":297,"column":4},"action":"insert","lines":["# "]},{"start":{"row":299,"column":2},"end":{"row":299,"column":4},"action":"insert","lines":["# "]},{"start":{"row":300,"column":2},"end":{"row":300,"column":4},"action":"insert","lines":["# "]},{"start":{"row":301,"column":2},"end":{"row":301,"column":4},"action":"insert","lines":["# "]},{"start":{"row":302,"column":2},"end":{"row":302,"column":4},"action":"insert","lines":["# "]},{"start":{"row":304,"column":2},"end":{"row":304,"column":4},"action":"insert","lines":["# "]},{"start":{"row":305,"column":2},"end":{"row":305,"column":4},"action":"insert","lines":["# "]},{"start":{"row":306,"column":2},"end":{"row":306,"column":4},"action":"insert","lines":["# "]},{"start":{"row":308,"column":2},"end":{"row":308,"column":4},"action":"insert","lines":["# "]},{"start":{"row":309,"column":2},"end":{"row":309,"column":4},"action":"insert","lines":["# "]},{"start":{"row":310,"column":2},"end":{"row":310,"column":4},"action":"insert","lines":["# "]},{"start":{"row":311,"column":2},"end":{"row":311,"column":4},"action":"insert","lines":["# "]},{"start":{"row":313,"column":2},"end":{"row":313,"column":4},"action":"insert","lines":["# "]},{"start":{"row":314,"column":2},"end":{"row":314,"column":4},"action":"insert","lines":["# "]},{"start":{"row":315,"column":2},"end":{"row":315,"column":4},"action":"insert","lines":["# "]},{"start":{"row":316,"column":2},"end":{"row":316,"column":4},"action":"insert","lines":["# "]},{"start":{"row":318,"column":2},"end":{"row":318,"column":4},"action":"insert","lines":["# "]},{"start":{"row":319,"column":2},"end":{"row":319,"column":4},"action":"insert","lines":["# "]},{"start":{"row":320,"column":2},"end":{"row":320,"column":4},"action":"insert","lines":["# "]},{"start":{"row":322,"column":2},"end":{"row":322,"column":4},"action":"insert","lines":["# "]},{"start":{"row":323,"column":2},"end":{"row":323,"column":4},"action":"insert","lines":["# "]},{"start":{"row":324,"column":2},"end":{"row":324,"column":4},"action":"insert","lines":["# "]},{"start":{"row":325,"column":2},"end":{"row":325,"column":4},"action":"insert","lines":["# "]},{"start":{"row":326,"column":2},"end":{"row":326,"column":4},"action":"insert","lines":["# "]},{"start":{"row":327,"column":2},"end":{"row":327,"column":4},"action":"insert","lines":["# "]}],[{"start":{"row":0,"column":0},"end":{"row":282,"column":0},"action":"remove","lines":["require 'rails_helper'","","RSpec.describe \"Users\", type: :request do","  let(:user) { create(:user) }","  let(:user) { FactoryBot.create(:user) }","  let(:other_user) { FactoryBot.create(:user) }","  let(:post) { create(:post, user: user) }","","","  describe \"GET /index\" do","    context \"when user is not authenticated\" do","      it \"redirects to login page\" do","        get users_path","        expect(response).to redirect_to new_user_session_path","      end","    end","","    context \"when user is authenticated\" do","      before do","        sign_in user","        get users_path","      end","","      it \"responds successfully\" do","        expect(response).to be_successful","      end","","      it \"returns a 200 response\" do","        expect(response).to have_http_status \"200\"","      end","","      it \"assigns the requested users to @users\" do","        expect(assigns(:users)).to match_array(User.where(is_deleted: false).where.not(email: 'guest@example.com'))","      end","    end","  end","","  describe 'GET #show' do","    before do","      sign_in user","      get user_path(user)","    end","","    it 'responds successfully' do","      expect(response).to be_successful","    end","","    it 'returns a 200 response' do","      expect(response).to have_http_status \"200\"","    end","  end","","  describe 'GET #edit' do","    before do","      sign_in user","      get edit_user_path(user)","    end","","    it 'responds successfully' do","      expect(response).to be_successful","    end","","    it 'returns a 200 response' do","      expect(response).to have_http_status \"200\"","    end","  end","","  describe 'PATCH #update' do","    context 'with valid attributes' do","      before do","        sign_in user","         patch user_path(user), params: { user: { username: 'updated username' } }","      end","","      it \"updates the user\" do","        patch user_path(user), params: { user: { username: 'updated username' } }","        expect(user.reload.username).to eq 'updated username'","      end","","","      it 'redirects to the user page' do","        expect(response).to redirect_to user_path(user)","      end","    end","","    context 'with invalid attributes' do","      before do","        sign_in user","        patch user_path(user), params: { user: attributes_for(:user, username: nil) }","      end","","      it 'does not update the user' do","        expect(user.reload.username).to_not eq nil","      end","","      it 're-renders the edit template' do","        expect(response).to render_template :edit","      end","    end","  end","","","  describe \"GET #liked_posts\" do","    context \"when user is authenticated\" do","      let(:user)  { create(:user) }","      let(:post1) { create(:post) }","      let(:post2) { create(:post) }","","      before do","        user.likes.create(post_id: post1.id)","        sign_in user","        get liked_posts_user_path(user)","      end","","      it \"responds successfuly\" do","        expect(response).to be_successful","      end","","      it \"returns a 200 response\" do","        expect(response).to have_http_status \"200\"","      end","","      it \"assigns the requested liked_posts to @liked_posts\" do","        expect(assigns(:liked_posts)).to match_array(user.liked_posts)","      end","    end","","      context \"when user is not authenticated\" do","        it \"redirects to login page\" do","          sign_out user","          get liked_posts_user_path(user)","          expect(response).to redirect_to new_user_session_path","        end","      end","    end","","    describe \"PATCH #hide\" do","      let(:user) { create(:user) }","","      context \"when user is authenticated\" do","        before do","          sign_in user","          delete users_hide_user_path(user)","          expect(response).to redirect_to root_path","        end","","        it \"updates is_deleted to true\" do","          expect(user.reload.is_deleted).to eq true","        end","","","        it \"redirect to root_path\" do","          expect(response).to redirect_to root_path","        end","","        it \"sets a flash message\" do","          expect(flash[:notice]).to eq \"ありがとうございました。またのご利用を心よりお待ちしております。\"","        end","      end","","      context \"when user is not authenticated\" do","        it \"redirect to login page\" do","          sign_out user","          delete users_hide_user_path(user)","          expect(response).to redirect_to root_path","        end","      end","    end","","","    describe \"POST #follow\" do","  context \"when user is authenticated\" do","    before do","      sign_in user","    end","","    it \"creates a new relationship\" do","      expect do","       post follow_user_path(other_user)","      end.to change(user.following, :count).by(1)","    end","","    it \"returns a successful response\" do","      post follow_user_path(other_user)","      expect(response).to have_http_status(:redirect)","    end","  end","","  context \"when user is not authenticated\" do","    it \"does not create a new relationship\" do","      expect do","        post follow_user_path(other_user.id)","      end.to_not change(user.following, :count)","    end","  end","end","","describe \"DELETE #unfollow\" do","  context \"when user is authenticated\" do","    before do","      sign_in user","      user.following << other_user","    end","","    it \"destroys the relationship\" do","      expect do","        delete unfollow_user_path(other_user.id)","      end.to change(user.following, :count).by(-1)","    end","","    it \"returns a successful response\" do","      delete unfollow_user_path(other_user.id)","      expect(response).to have_http_status(:redirect)","    end","  end","","  context \"when user is not authenticated\" do","    before do","      user.following << other_user","    end","","    it \"does not destroy the relationship\" do","      expect do","        delete unfollow_user_path(other_user.id)","      end.to_not change(user.following, :count)","    end","  end","end","","  describe \"GET #following\" do","    context \"when user is authenticated\" do","      before do","        sign_in user","        user.follow(other_user)","      end","","      it \"returns a successful response\" do","        get following_user_path(user.id)","        expect(response).to have_http_status(:success)","      end","","      it \"renders 'show_follow'\" do","        get following_user_path(user.id)","        expect(response).to render_template('show_follow')","      end","    end","","    context \"when user is not authenticated\" do","      it \"redirects to the login page\" do","        get following_user_path(user.id)","        expect(response).to redirect_to(new_user_session_path)","      end","    end","  end","","","  describe \"GET #followers\" do","    context \"when user is authenticated\" do","      before do","        sign_in user","        other_user.follow(user)","      end","","      it \"returns a succsseful response\" do","        get followers_user_path(user.id)","        expect(response).to have_http_status(:success)","      end","","      it \"renders 'show_follow' \" do","        get followers_user_path(user.id)","        expect(response).to render_template('show_follow')","      end","    end","","    context \"when user is not authenticated\" do","      it \"redirect to the login page\" do","        get followers_user_path(user.id)","        expect(response).to redirect_to(new_user_session_path)","      end","    end","  end","",""],"id":2422},{"start":{"row":0,"column":0},"end":{"row":338,"column":0},"action":"insert","lines":["require 'rails_helper'","","RSpec.describe \"Users\", type: :request do","  let(:user) { create(:user) }","  let(:user) { FactoryBot.create(:user) }","  let(:other_user) { FactoryBot.create(:user) }","","","  describe \"GET /index\" do","    context \"when user is not authenticated\" do","      it \"redirects to login page\" do","        get users_path","        expect(response).to redirect_to new_user_session_path","      end","    end","","    context \"when user is authenticated\" do","      before do","        sign_in user","        get users_path","      end","","      it \"responds successfully\" do","        expect(response).to be_successful","      end","","      it \"returns a 200 response\" do","        expect(response).to have_http_status \"200\"","      end","","      it \"assigns the requested users to @users\" do","        expect(assigns(:users)).to match_array(User.where(is_deleted: false).where.not(email: 'guest@example.com'))","      end","    end","  end","","  describe 'GET #show' do","    before do","      sign_in user","      get user_path(user)","    end","","    it 'responds successfully' do","      expect(response).to be_successful","    end","","    it 'returns a 200 response' do","      expect(response).to have_http_status \"200\"","    end","  end","","  describe 'GET #edit' do","    before do","      sign_in user","      get edit_user_path(user)","    end","","    it 'responds successfully' do","      expect(response).to be_successful","    end","","    it 'returns a 200 response' do","      expect(response).to have_http_status \"200\"","    end","  end","","  describe 'PATCH #update' do","    context 'with valid attributes' do","      before do","        sign_in user","         patch user_path(user), params: { user: { username: 'updated username' } }","      end","","      it \"updates the user\" do","        patch user_path(user), params: { user: { username: 'updated username' } }","        expect(user.reload.username).to eq 'updated username'","      end","","","      it 'redirects to the user page' do","        expect(response).to redirect_to user_path(user)","      end","    end","","    context 'with invalid attributes' do","      before do","        sign_in user","        patch user_path(user), params: { user: attributes_for(:user, username: nil) }","      end","","      it 'does not update the user' do","        expect(user.reload.username).to_not eq nil","      end","","      it 're-renders the edit template' do","        expect(response).to render_template :edit","      end","    end","  end","","","  describe \"GET #liked_posts\" do","    context \"when user is authenticated\" do","      let(:user)  { create(:user) }","      let(:post1) { create(:post) }","      let(:post2) { create(:post) }","","      before do","        user.likes.create(post_id: post1.id)","        sign_in user","        get liked_posts_user_path(user)","      end","","      it \"responds successfuly\" do","        expect(response).to be_successful","      end","","      it \"returns a 200 response\" do","        expect(response).to have_http_status \"200\"","      end","","      it \"assigns the requested liked_posts to @liked_posts\" do","        expect(assigns(:liked_posts)).to match_array(user.liked_posts)","      end","    end","","      context \"when user is not authenticated\" do","        it \"redirects to login page\" do","          sign_out user","          get liked_posts_user_path(user)","          expect(response).to redirect_to new_user_session_path","        end","      end","    end","","    describe \"PATCH #hide\" do","      let(:user) { create(:user) }","","      context \"when user is authenticated\" do","        before do","          sign_in user","          delete users_hide_user_path(user)","          expect(response).to redirect_to root_path","        end","","        it \"updates is_deleted to true\" do","          expect(user.reload.is_deleted).to eq true","        end","","","        it \"redirect to root_path\" do","          expect(response).to redirect_to root_path","        end","","        it \"sets a flash message\" do","          expect(flash[:notice]).to eq \"ありがとうございました。またのご利用を心よりお待ちしております。\"","        end","      end","","      context \"when user is not authenticated\" do","        it \"redirect to login page\" do","          sign_out user","          delete users_hide_user_path(user)","          expect(response).to redirect_to root_path","        end","      end","    end","","","    describe \"POST #follow\" do","  context \"when user is authenticated\" do","    before do","      sign_in user","    end","","    it \"creates a new relationship\" do","      expect do","        post follow_user_path(other_user.id)","      end.to change(user.following, :count).by(1)","    end","","    it \"returns a successful response\" do","      post follow_user_path(other_user.id)","      expect(response).to have_http_status(:redirect)","    end","  end","","  context \"when user is not authenticated\" do","    it \"does not create a new relationship\" do","      expect do","        post follow_user_path(other_user.id)","      end.to_not change(user.following, :count)","    end","  end","end","","describe \"DELETE #unfollow\" do","  context \"when user is authenticated\" do","    before do","      sign_in user","      user.following << other_user","    end","","    it \"destroys the relationship\" do","      expect do","        delete unfollow_user_path(other_user.id)","      end.to change(user.following, :count).by(-1)","    end","","    it \"returns a successful response\" do","      delete unfollow_user_path(other_user.id)","      expect(response).to have_http_status(:redirect)","    end","  end","","  context \"when user is not authenticated\" do","    before do","      user.following << other_user","    end","","    it \"does not destroy the relationship\" do","      expect do","        delete unfollow_user_path(other_user.id)","      end.to_not change(user.following, :count)","    end","  end","end","","  describe \"GET #following\" do","    context \"when user is authenticated\" do","      before do","        sign_in user","        user.follow(other_user)","      end","","      it \"returns a successful response\" do","        get following_user_path(user.id)","        expect(response).to have_http_status(:success)","      end","","      it \"renders 'show_follow'\" do","        get following_user_path(user.id)","        expect(response).to render_template('show_follow')","      end","    end","","    context \"when user is not authenticated\" do","      it \"redirects to the login page\" do","        get following_user_path(user.id)","        expect(response).to redirect_to(new_user_session_path)","      end","    end","  end","","","  describe \"GET #followers\" do","    context \"when user is authenticated\" do","      before do","        sign_in user","        other_user.follow(user)","      end","","      it \"returns a succsseful response\" do","        get followers_user_path(user.id)","        expect(response).to have_http_status(:success)","      end","","      it \"renders 'show_follow' \" do","        get followers_user_path(user.id)","        expect(response).to render_template('show_follow')","      end","    end","","    context \"when user is not authenticated\" do","      it \"redirect to the login page\" do","        get followers_user_path(user.id)","        expect(response).to redirect_to(new_user_session_path)","      end","    end","  end","","","end","","","  #無限ループになり処理できない","  # describe 'GET #chat_history' do","","  #   let(:user) { create(:user) }","  #   let(:other_user_1) { create(:user) }","  #   let(:other_user_2) { create(:user) }","","  #   let(:room_1) { create(:room) }","  #   let(:room_2) { create(:room) }","","  #   let(:user_room_1) { create(:user_room, user: user, room: room_1) }","  #   let(:user_room_2) { create(:user_room, user: user, room: room_2) }","  #   let(:user_room_3) { create(:user_room, user: other_user_1, room: room_1) }","  #   let(:user_room_4) { create(:user_room, user: other_user_2, room: room_2) }","","  #   before do","  #     user","  #     other_user_1","  #     other_user_2","  #     room_1","  #     room_2","  #     user_room_1","  #     user_room_2","  #     user_room_3","  #     user_room_4","  # end","","","  #   context 'when user is authenticated' do","  #     before do","  #       sign_in user","  #       get chat_history_user_path(user)","  #     end","","  #     it 'assigns the current user to @user' do","  #       expect(assigns(:user)).to eq user","  #     end","","  #     it 'assigns the other users in the chat room to @chat_users' do","  #       expect(assigns(:chat_users)).to match_array [other_user_1, other_user_2]","  #     end","  #   end","","  #   context 'when user is not authenticated' do","  #     before do","  #       get chat_history_user_path(user)","  #     end","","  #     it 'redirect to the login page' do","  #       expect(response).to redirect_to new_user_session_path","  #     end","  #   end","  # end",""]}],[{"start":{"row":389,"column":0},"end":{"row":444,"column":0},"action":"remove","lines":["","  #無限ループになり処理できない","  # describe 'GET #chat_history' do","","  #   let(:user) { create(:user) }","  #   let(:other_user_1) { create(:user) }","  #   let(:other_user_2) { create(:user) }","","  #   let(:room_1) { create(:room) }","  #   let(:room_2) { create(:room) }","","  #   let(:user_room_1) { create(:user_room, user: user, room: room_1) }","  #   let(:user_room_2) { create(:user_room, user: user, room: room_2) }","  #   let(:user_room_3) { create(:user_room, user: other_user_1, room: room_1) }","  #   let(:user_room_4) { create(:user_room, user: other_user_2, room: room_2) }","","  #   before do","  #     user","  #     other_user_1","  #     other_user_2","  #     room_1","  #     room_2","  #     user_room_1","  #     user_room_2","  #     user_room_3","  #     user_room_4","  # end","","","  #   context 'when user is authenticated' do","  #     before do","  #       sign_in user","  #       get chat_history_user_path(user)","  #     end","","  #     it 'assigns the current user to @user' do","  #       expect(assigns(:user)).to eq user","  #     end","","  #     it 'assigns the other users in the chat room to @chat_users' do","  #       expect(assigns(:chat_users)).to match_array [other_user_1, other_user_2]","  #     end","  #   end","","  #   context 'when user is not authenticated' do","  #     before do","  #       get chat_history_user_path(user)","  #     end","","  #     it 'redirect to the login page' do","  #       expect(response).to redirect_to new_user_session_path","  #     end","  #   end","  # end","",""],"id":2423}],[{"start":{"row":387,"column":0},"end":{"row":387,"column":3},"action":"remove","lines":["end"],"id":2424}],[{"start":{"row":340,"column":1},"end":{"row":384,"column":0},"action":"remove","lines":[" # describe \"GET #search\" do","  #   context 'when searching for users' do","  #     before do","  #       get search_users_path, params: { keyword: user.username, type: 'user' }","  #     end","","  #     it 'returns a successful response' do","  #       expect(response).to have_http_statu(:success)","  #     end","","  #     it 'assigns @users' do","  #       expect(assigns(:users)).to eq([user]) #@usersに検索にユーザーが入っているか確認。","  #     end","  #   end","","  #   context 'when searching for posts' do","  #     before do","  #       get search_users_path, params: { keyword: post.content, type: 'post' }","  #     end","","  #     it 'returns a successful response' do","  #       expect(response).to have_http_status(:success)","  #     end","","  #     it 'assigns @posts' do","  #       expect(assigns(:posts)).to eq([post]) # @postsに検索した内容が入っているか確認","  #     end","  #   end","","  #   context 'when keyword is not present?' do","  #     before do","  #       get search_user_path","  #     end","","  #     it 'returns a successful response' do","  #       expect(response).to have_http_status(:success)","  #     end","","  #     it 'assigns @users and @posts' do","  #       expect(assigns(:users)).to eq(User.all)","  #       expect(assigns(:posts)).to eq(Post.all)","  #     end","  #   end","  # end",""],"id":2425}],[{"start":{"row":279,"column":5},"end":{"row":280,"column":0},"action":"insert","lines":["",""],"id":2426},{"start":{"row":280,"column":0},"end":{"row":280,"column":2},"action":"insert","lines":["  "]},{"start":{"row":280,"column":2},"end":{"row":281,"column":0},"action":"insert","lines":["",""]},{"start":{"row":281,"column":0},"end":{"row":281,"column":2},"action":"insert","lines":["  "]}],[{"start":{"row":281,"column":2},"end":{"row":325,"column":0},"action":"insert","lines":[" # describe \"GET #search\" do","  #   context 'when searching for users' do","  #     before do","  #       get search_users_path, params: { keyword: user.username, type: 'user' }","  #     end","","  #     it 'returns a successful response' do","  #       expect(response).to have_http_statu(:success)","  #     end","","  #     it 'assigns @users' do","  #       expect(assigns(:users)).to eq([user]) #@usersに検索にユーザーが入っているか確認。","  #     end","  #   end","","  #   context 'when searching for posts' do","  #     before do","  #       get search_users_path, params: { keyword: post.content, type: 'post' }","  #     end","","  #     it 'returns a successful response' do","  #       expect(response).to have_http_status(:success)","  #     end","","  #     it 'assigns @posts' do","  #       expect(assigns(:posts)).to eq([post]) # @postsに検索した内容が入っているか確認","  #     end","  #   end","","  #   context 'when keyword is not present?' do","  #     before do","  #       get search_user_path","  #     end","","  #     it 'returns a successful response' do","  #       expect(response).to have_http_status(:success)","  #     end","","  #     it 'assigns @users and @posts' do","  #       expect(assigns(:users)).to eq(User.all)","  #       expect(assigns(:posts)).to eq(Post.all)","  #     end","  #   end","  # end",""],"id":2427}],[{"start":{"row":281,"column":3},"end":{"row":281,"column":4},"action":"remove","lines":["#"],"id":2428},{"start":{"row":282,"column":2},"end":{"row":282,"column":4},"action":"remove","lines":["# "]},{"start":{"row":283,"column":2},"end":{"row":283,"column":4},"action":"remove","lines":["# "]},{"start":{"row":284,"column":2},"end":{"row":284,"column":4},"action":"remove","lines":["# "]},{"start":{"row":285,"column":2},"end":{"row":285,"column":4},"action":"remove","lines":["# "]},{"start":{"row":287,"column":2},"end":{"row":287,"column":4},"action":"remove","lines":["# "]},{"start":{"row":288,"column":2},"end":{"row":288,"column":4},"action":"remove","lines":["# "]},{"start":{"row":289,"column":2},"end":{"row":289,"column":4},"action":"remove","lines":["# "]},{"start":{"row":291,"column":2},"end":{"row":291,"column":4},"action":"remove","lines":["# "]},{"start":{"row":292,"column":2},"end":{"row":292,"column":4},"action":"remove","lines":["# "]},{"start":{"row":293,"column":2},"end":{"row":293,"column":4},"action":"remove","lines":["# "]},{"start":{"row":294,"column":2},"end":{"row":294,"column":4},"action":"remove","lines":["# "]},{"start":{"row":296,"column":2},"end":{"row":296,"column":4},"action":"remove","lines":["# "]},{"start":{"row":297,"column":2},"end":{"row":297,"column":4},"action":"remove","lines":["# "]},{"start":{"row":298,"column":2},"end":{"row":298,"column":4},"action":"remove","lines":["# "]},{"start":{"row":299,"column":2},"end":{"row":299,"column":4},"action":"remove","lines":["# "]},{"start":{"row":301,"column":2},"end":{"row":301,"column":4},"action":"remove","lines":["# "]},{"start":{"row":302,"column":2},"end":{"row":302,"column":4},"action":"remove","lines":["# "]},{"start":{"row":303,"column":2},"end":{"row":303,"column":4},"action":"remove","lines":["# "]},{"start":{"row":305,"column":2},"end":{"row":305,"column":4},"action":"remove","lines":["# "]},{"start":{"row":306,"column":2},"end":{"row":306,"column":4},"action":"remove","lines":["# "]},{"start":{"row":307,"column":2},"end":{"row":307,"column":4},"action":"remove","lines":["# "]},{"start":{"row":308,"column":2},"end":{"row":308,"column":4},"action":"remove","lines":["# "]},{"start":{"row":310,"column":2},"end":{"row":310,"column":4},"action":"remove","lines":["# "]},{"start":{"row":311,"column":2},"end":{"row":311,"column":4},"action":"remove","lines":["# "]},{"start":{"row":312,"column":2},"end":{"row":312,"column":4},"action":"remove","lines":["# "]},{"start":{"row":313,"column":2},"end":{"row":313,"column":4},"action":"remove","lines":["# "]},{"start":{"row":315,"column":2},"end":{"row":315,"column":4},"action":"remove","lines":["# "]},{"start":{"row":316,"column":2},"end":{"row":316,"column":4},"action":"remove","lines":["# "]},{"start":{"row":317,"column":2},"end":{"row":317,"column":4},"action":"remove","lines":["# "]},{"start":{"row":319,"column":2},"end":{"row":319,"column":4},"action":"remove","lines":["# "]},{"start":{"row":320,"column":2},"end":{"row":320,"column":4},"action":"remove","lines":["# "]},{"start":{"row":321,"column":2},"end":{"row":321,"column":4},"action":"remove","lines":["# "]},{"start":{"row":322,"column":2},"end":{"row":322,"column":4},"action":"remove","lines":["# "]},{"start":{"row":323,"column":2},"end":{"row":323,"column":4},"action":"remove","lines":["# "]},{"start":{"row":324,"column":2},"end":{"row":324,"column":4},"action":"remove","lines":["# "]}],[{"start":{"row":280,"column":0},"end":{"row":280,"column":2},"action":"remove","lines":["  "],"id":2429},{"start":{"row":386,"column":0},"end":{"row":386,"column":1},"action":"remove","lines":[" "]}],[{"start":{"row":312,"column":23},"end":{"row":312,"column":24},"action":"insert","lines":["s"],"id":2430}],[{"start":{"row":302,"column":8},"end":{"row":302,"column":54},"action":"remove","lines":["expect(response).to have_http_status(:success)"],"id":2431},{"start":{"row":302,"column":8},"end":{"row":303,"column":0},"action":"insert","lines":["expect(response).to have_http_status(:success)",""]}],[{"start":{"row":302,"column":54},"end":{"row":303,"column":0},"action":"remove","lines":["",""],"id":2432}],[{"start":{"row":288,"column":8},"end":{"row":288,"column":53},"action":"remove","lines":["expect(response).to have_http_statu(:success)"],"id":2433},{"start":{"row":288,"column":8},"end":{"row":289,"column":0},"action":"insert","lines":["expect(response).to have_http_status(:success)",""]}],[{"start":{"row":288,"column":54},"end":{"row":289,"column":0},"action":"remove","lines":["",""],"id":2434}],[{"start":{"row":298,"column":8},"end":{"row":298,"column":78},"action":"remove","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }"],"id":2435},{"start":{"row":298,"column":8},"end":{"row":299,"column":0},"action":"insert","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }",""]}],[{"start":{"row":298,"column":78},"end":{"row":299,"column":0},"action":"remove","lines":["",""],"id":2436}],[{"start":{"row":298,"column":8},"end":{"row":298,"column":78},"action":"remove","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }"],"id":2437},{"start":{"row":298,"column":8},"end":{"row":299,"column":0},"action":"insert","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }",""]}],[{"start":{"row":298,"column":78},"end":{"row":299,"column":0},"action":"remove","lines":["",""],"id":2438}],[{"start":{"row":298,"column":8},"end":{"row":298,"column":78},"action":"remove","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }"],"id":2439},{"start":{"row":298,"column":8},"end":{"row":299,"column":0},"action":"insert","lines":["get search_users_path(keyword: post.content, type: 'post')",""]}],[{"start":{"row":298,"column":66},"end":{"row":299,"column":0},"action":"remove","lines":["",""],"id":2440}],[{"start":{"row":298,"column":8},"end":{"row":298,"column":66},"action":"remove","lines":["get search_users_path(keyword: post.content, type: 'post')"],"id":2441},{"start":{"row":298,"column":8},"end":{"row":299,"column":0},"action":"insert","lines":["get search_users_path(params: { keyword: post.content, type: 'post' })",""]}],[{"start":{"row":298,"column":78},"end":{"row":299,"column":0},"action":"remove","lines":["",""],"id":2442}],[{"start":{"row":298,"column":8},"end":{"row":298,"column":78},"action":"remove","lines":["get search_users_path(params: { keyword: post.content, type: 'post' })"],"id":2443},{"start":{"row":298,"column":8},"end":{"row":299,"column":0},"action":"insert","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }",""]}],[{"start":{"row":298,"column":78},"end":{"row":299,"column":0},"action":"remove","lines":["",""],"id":2444}],[{"start":{"row":298,"column":8},"end":{"row":298,"column":78},"action":"remove","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }"],"id":2445},{"start":{"row":298,"column":8},"end":{"row":299,"column":0},"action":"insert","lines":["get search_users_path(params: { keyword: post.content, type: 'post' })",""]}],[{"start":{"row":298,"column":78},"end":{"row":299,"column":0},"action":"remove","lines":["",""],"id":2446}],[{"start":{"row":298,"column":8},"end":{"row":298,"column":78},"action":"remove","lines":["get search_users_path(params: { keyword: post.content, type: 'post' })"],"id":2447},{"start":{"row":298,"column":8},"end":{"row":299,"column":0},"action":"insert","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }",""]}],[{"start":{"row":298,"column":78},"end":{"row":299,"column":0},"action":"remove","lines":["",""],"id":2448}],[{"start":{"row":298,"column":8},"end":{"row":298,"column":78},"action":"remove","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }"],"id":2449},{"start":{"row":298,"column":8},"end":{"row":299,"column":0},"action":"insert","lines":["get search_users_path(keyword: post.content, type: 'post')",""]}],[{"start":{"row":298,"column":66},"end":{"row":299,"column":0},"action":"remove","lines":["",""],"id":2450}],[{"start":{"row":298,"column":8},"end":{"row":298,"column":66},"action":"remove","lines":["get search_users_path(keyword: post.content, type: 'post')"],"id":2451},{"start":{"row":298,"column":8},"end":{"row":298,"column":78},"action":"insert","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }"]}],[{"start":{"row":298,"column":8},"end":{"row":298,"column":78},"action":"remove","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }"],"id":2452},{"start":{"row":298,"column":8},"end":{"row":299,"column":0},"action":"insert","lines":["get search_users_path(params: { keyword: post.content, type: 'post' })",""]}],[{"start":{"row":298,"column":78},"end":{"row":299,"column":0},"action":"remove","lines":["",""],"id":2453}],[{"start":{"row":298,"column":77},"end":{"row":298,"column":78},"action":"remove","lines":[")"],"id":2454}],[{"start":{"row":298,"column":29},"end":{"row":298,"column":30},"action":"remove","lines":["("],"id":2455}],[{"start":{"row":298,"column":29},"end":{"row":298,"column":30},"action":"insert","lines":[","],"id":2456}],[{"start":{"row":298,"column":30},"end":{"row":298,"column":31},"action":"insert","lines":[" "],"id":2457}],[{"start":{"row":296,"column":41},"end":{"row":297,"column":0},"action":"insert","lines":["",""],"id":2458},{"start":{"row":297,"column":0},"end":{"row":297,"column":6},"action":"insert","lines":["      "]}],[{"start":{"row":297,"column":6},"end":{"row":297,"column":59},"action":"insert","lines":["let(:post) { create(:post, content: 'test content') }"],"id":2459}],[{"start":{"row":299,"column":8},"end":{"row":299,"column":78},"action":"remove","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }"],"id":2460},{"start":{"row":299,"column":8},"end":{"row":299,"column":78},"action":"insert","lines":["get search_users_path, params: { keyword: post.content, type: 'post' }"]}],[{"start":{"row":296,"column":41},"end":{"row":297,"column":0},"action":"insert","lines":["",""],"id":2461},{"start":{"row":297,"column":0},"end":{"row":297,"column":6},"action":"insert","lines":["      "]}],[{"start":{"row":297,"column":6},"end":{"row":297,"column":35},"action":"insert","lines":["let(:user) { create(:user) } "],"id":2462}],[{"start":{"row":297,"column":34},"end":{"row":297,"column":35},"action":"remove","lines":[" "],"id":2463}],[{"start":{"row":299,"column":15},"end":{"row":300,"column":0},"action":"insert","lines":["",""],"id":2464},{"start":{"row":300,"column":0},"end":{"row":300,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":300,"column":8},"end":{"row":300,"column":9},"action":"insert","lines":["s"],"id":2465},{"start":{"row":300,"column":9},"end":{"row":300,"column":10},"action":"insert","lines":["i"]},{"start":{"row":300,"column":10},"end":{"row":300,"column":11},"action":"insert","lines":["g"]},{"start":{"row":300,"column":11},"end":{"row":300,"column":12},"action":"insert","lines":["n"]},{"start":{"row":300,"column":12},"end":{"row":300,"column":13},"action":"insert","lines":["_"]},{"start":{"row":300,"column":13},"end":{"row":300,"column":14},"action":"insert","lines":["i"]},{"start":{"row":300,"column":14},"end":{"row":300,"column":15},"action":"insert","lines":["n"]}],[{"start":{"row":300,"column":15},"end":{"row":300,"column":16},"action":"insert","lines":[" "],"id":2466},{"start":{"row":300,"column":16},"end":{"row":300,"column":17},"action":"insert","lines":["u"]},{"start":{"row":300,"column":17},"end":{"row":300,"column":18},"action":"insert","lines":["s"]},{"start":{"row":300,"column":18},"end":{"row":300,"column":19},"action":"insert","lines":["e"]},{"start":{"row":300,"column":19},"end":{"row":300,"column":20},"action":"insert","lines":["r"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":297,"column":34},"end":{"row":297,"column":34},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1684742414946,"hash":"95a06f08368aaa6749ef2ec444e799c69d3a6fd0"}